#!/bin/bash
#SBATCH -J "plottile_to_patches_ir_{{job_title}}"
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4
#SBATCH --output={{ log_dir }}/%j-{{job_title}}-plot_to_patch.txt
#SBATCH --error={{ log_dir }}/%j-{{job_title}}-plot_to_patch.err
#SBATCH --time=0:30:00
#SBATCH --mem=48G
#SBATCH -A PAS2699

source /fs/ess/PAS2699/envs/miniconda3/etc/profile.d/conda.sh
conda activate harvest

echo "Running plot tile to patches extraction for: {{ job_title }}"

num_cores=$(nproc)
echo Number of cores: $num_cores

job_name="{{ job_title }}"

start_time=$(date +%s)

python -u "{{ python_script }}" \
    --input_dir "{{ input_path }}" \
    --output_dir "{{ output_path_plot_patches }}"


end_time=$(date +%s)
execution_time=$((end_time - start_time))

processing_step="plottile_to_patches_{{sensor_type}}"

log_dir={{logdir_perf}}
log_file="$log_dir/execution_times_plottile_to_patches_{{sensor_type}}.csv"

# Check if the log file exists
if [ ! -f "$log_file" ]; then
  # File doesn't exist, so write the header
  echo "job_id,job_name,processing_step,num_cores,memory,start_time,end_time,execution_time,output_size" > "$log_file"
fi

# Get the size of the output folder
output_size=$(du -sh "{{ output_path_plot_patches }}" | awk '{print $1}')

# Append the data
echo "$SLURM_JOB_ID,$job_name,$processing_step,$num_cores,$SLURM_MEM_PER_NODE,$start_time,$end_time,$execution_time,$output_size" >> "$log_file"

echo "All jobs are done, total time of execution: $execution_time seconds"