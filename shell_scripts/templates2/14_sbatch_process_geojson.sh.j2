#!/bin/bash
#SBATCH -J "generating_geojson_{{ job_title }}"
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task={{ resources.cpus }}
#SBATCH --mem={{ resources.memory }}
#SBATCH --time={{ resources.time }}
#SBATCH --partition={{ resources.partition }}
#SBATCH -A PAS2699
#SBATCH -o "{{ log_dir }}/%j-{{ job_title }}-process_geojson.txt"
#SBATCH --error="{{ log_dir }}/%j-{{ job_title }}-process_geojson.err"

source /fs/ess/PAS2699/envs/miniconda3/etc/profile.d/conda.sh
conda activate harvest

echo "Running to generating geojson for: {{ job_title }}"

num_cores=$(nproc)
echo Number of cores: $num_cores

job_name="{{ job_title }}"

start_time=$(date +%s)

python "{{ python_script }}" \
    --inference_folder "{{ json_inference_dir }}" \
    --location "{{ om }}" \
    --date "{{ date }}" \
    --output_json "{{ output_folder_geojson }}"

end_time=$(date +%s)
execution_time=$((end_time - start_time))

processing_step="generating_geojson"

log_dir={{logdir_perf}}
log_file="$log_dir/execution_times_geojson.csv"

# Get the size of the output folder
output_size=$(du -sh "{{ json_inference_dir }}" | awk '{print $1}')

# Check if the log file exists
if [ ! -f "$log_file" ]; then
  # File doesn't exist, so write the header
  echo "job_id,job_name,processing_step,num_cores,memory,start_time,end_time,execution_time,output_size" > "$log_file"
fi

# Append the data
echo "$SLURM_JOB_ID,$job_name,$processing_step,$num_cores,$SLURM_MEM_PER_NODE,$start_time,$end_time,$execution_time,$output_size" >> "$log_file"

echo "All jobs are done, total time of execution: $execution_time seconds"